- name: Probe VM with key-based SSH
  shell: |
    ssh -o BatchMode=yes \
        -o UserKnownHostsFile=/dev/null \
        -o StrictHostKeyChecking=no \
        -o ConnectTimeout=5 \
        {{ admin_id }}@{{ vm_fqdn }} 'echo sshkey'
  register: ssh_key_check
  delegate_to: localhost
  become: false
  failed_when: false
  changed_when: false

- name: Ensure SSH keypair exists on control node
  openssh_keypair:
    path: "{{ ssh_key_path | default('~/.ssh/id_rsa') }}"
    type: rsa
    size: 2048
  delegate_to: localhost
  become: false


- name: Push public key using authorized_key
  authorized_key:
    user: "{{ admin_id }}"
    state: present
    key: "{{ lookup('file', ssh_key_path | default('~/.ssh/id_rsa') ~ '.pub') }}"
  vars:
    ansible_user: "{{ admin_id }}"
    ansible_ssh_pass: "{{ admin_set }}"
    ansible_host: "{{ vm_fqdn }}"
  delegate_to: "{{ vm_host }}"
  become: false

- name: Push public key to VM from localhost
  shell: |
    ssh -o StrictHostKeyChecking=no \
        -o UserKnownHostsFile=/dev/null \
        -o ConnectTimeout=5 \
        {{ admin_id }}@{{ vm_fqdn }} "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
    cat {{ ssh_key_path | default('~/.ssh/id_rsa') }}.pub | ssh \
        -o StrictHostKeyChecking=no \
        -o UserKnownHostsFile=/dev/null \
        -o ConnectTimeout=5 \
        {{ admin_id }}@{{ vm_fqdn }} "cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"
  delegate_to: localhost
  become: false
  register: ssh_key_push
  failed_when: ssh_key_push.rc != 0
  changed_when: "'Permission denied' not in ssh_key_push.stderr"


- name: Check if authorized_keys exists on VM
  stat:
    path: "/home/{{ admin_id }}/.ssh/authorized_keys"
  register: auth_keys_stat
  delegate_to: "{{ vm_host }}"
  become: true
  when: (ssh_key_check.stdout | default('')) != "sshkey"